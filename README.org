#+TITLE: Configuração do Emacs
#+AUTHOR: Guaracy Monteiro
#+EMAIL: guaracy.bm@gmail.com

#+SETUPFILE: readtheorg-html.setup

#+STARTUP: showeverything
#+STARTUP: indent

* Introdução

O objetivo principal deste documento é demonstrar um pouco de [[http://howardism.org/Technical/Emacs/literate-programming-tutorial.html][Literate Programming]] utilizando o Emacs juntamente com o org-mode. Ao término será possível gerar a documentação e o fonte do arquivo de configuração *eu* que estou utilizando no momento para o Emacs.

Esta configuração não é específica para os usuários do [[http://www.vim.org/][Vim]] (pelo menos para os que querem algo mais semelhante). Se você é um feliz usuário do Vim e deseja aprender [[https://www.gnu.org/software/emacs/][Emacs]] para usar suas facilidades como o [[http://orgmode.org/][org-mode]], etc., você deverá visitar o [[https://github.com/syl20bnr/spacemacs][Spacemacs]], [[https://github.com/hzenginx/spacelite][Spacelite]], [[https://github.com/hlissner/.emacs.d][Doom]] e outros. Eles configuram o Emacs de forma que você se sinta mais a vontade com relação aos atalhos do Vim e/ou visualmente.

Só no [[https://melpa.org/][Melpa]], existem mais de 3.600 pacotes para você configurar seu Emacs de modo a ficar mais adequado para o que você vai fazer. O arquivo gerado por este documento pode servir de base. Partir do zero pode ser complicado. Pode ser melhor você procurar na internet o que ou como os usuários configuraram o ambiente para uma determinada finalidade. Se você trabalha com Ruby, pode verificar como [[http://crypt.codemancers.com/posts/2013-09-26-setting-up-emacs-as-development-environment-on-osx/][este]] usuário configurou o ambiente dele. Ou uma configuração mais específica para [[https://stackoverflow.com/questions/7543428/configure-emacs-for-web-development-php#7543666][PHP]] ou para [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs][Python]], [[http://alchemist.readthedocs.io/en/latest/configuration/][Elixir]], [[https://wiki.haskell.org/Emacs][Haskell]], etc.. É a melhor configuração para ele mas já é um bom começo. No site da [[http://sachachua.com/blog/category/geek/emacs/][Sacha]] sempre tem as novidades da semana que incluem pacotes, dicas, etc.. Comece com alguma configuração existente, procure por outras e vá adaptando para o seu gosto pessoal.

Se você deseja utilizar esta configuração como base, leia normalmente este texto para ver a estrutura de cada etapa. O tópico de [[adaptacao][Adaptações]] pode auxiliá-lo sobre o que tirar, deixar e alterar.

* Configuração do Emacs

A ordem dos arquivos onde o Emacs busca pelas configurações é:
- ~/emacs
- ~/emacs.el
- ~/.emacs.d/init.el

Os arquivos são em [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][Emacs Lisp]] ou elisp, um dialeto de Lisp. Não é o objetivo ensinar a linguagem, mas é bem simples. Basicamente (função argumentos ...). Por exemplo, em (* 1 2 3 4 5), a função multiplicação recebe os argumentos 1 2 3 4 e 5. Nem é preciso dizer que o resultado será 120. Os parênteses são utilizados para definir a prioridade.

* Geração dos arquivos

** Configuração (.emacs)

Para a geração da configuração é necessário abrir este arquivo com o Emacs (uma instalação nova já seria o suficiente) e digitar =C-c C-v t=. Significa pressionar =Control+c=, =Control+v= e a tecla =t=. Todos os códigos desejados serão gravados no arquivo *~/.emacs*. Para que a nova configuração tenha efeito, o modo mais simples é sair do Emacs (=C-x C-c=) e iniciá-lo novamente.

#+BEGIN_danger
Será gerado o arquivo *~/.emacs*. Caso você já tenha este o arquivo já exista na pasta do seu usuário, faça uma cópia antes pois o conteúdo anterior será perdido.
#+END_danger

** Documentação (README.html)

Para a geração do arquivo de configuração, basta pressionar =C-e h h=. Para uma apresentação melhor dos documentos é necessário uma formatação adequada. A formatação utilizada aqui é a ReadTheOrg encontrada em [[https://github.com/fniessen/org-html-themes][org-html-themes]]. 

** README para o GitHub

Não é necessário a geração. O GitHub entende (não totalmente) o formato .org. Este é o motivo de gerar a documentação como README.html. Nada impediria que você trocar o nome do arquivo. Por praticidade, deixei assim.

* Estrutura do arquivo .emacs
  :PROPERTIES:
  :header-args:   :tangle ~/.emacs
  :END:

** Aspecto visual

Inicialmente iremos definir o tema, tamanho da janela e outros aspectos visuais.

#+BEGIN_SRC emacs-lisp +n
  ;; Gerado por:
  ;; https://github.com/guaracy/.emacs.d
  ;;
  ;; texto da barra de título
  (setq frame-title-format '(buffer-file-name "%f" ("%b")))
  ;; tamanho da janela
  (setq initial-frame-alist
        '((width . 130)
          (height . 40)))
  ;; elementos visuais
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  ;; apresentação/entrada do texto
  (setq inhibit-startup-message t)
  (setq inhibit-splash-screen t)
  (setq initial-scratch-message nil)
  (setq truncate-lines t)
  (show-paren-mode 1)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)
  (global-linum-mode t)
  (global-hl-line-mode 1)
  (ido-mode t)
  ;; modeline
  (line-number-mode 1)
  (column-number-mode 1)
  (setq initial-scratch-message
        ";; Nada neste buffer será salvo. Use:\n;; Ctrl+x Ctrl+r / Ctrl+x Ctrl+f para ler um arquivo.\n")
#+END_SRC

** Repositórios

O próximo passo é definir onde estarão nossos pacotes. Existem pacotes no GitHub e em diversos outros locais. O MELPA é um local que agrega os pacotes facilitando a localização dos mesmo.

#+BEGIN_SRC emacs-lisp +n -r
  (require 'package)
  (setq package-archives
        '(("gnu" . "https://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))
  (package-initialize)
  (when (not package-archive-contents)
    (package-refresh-contents))
#+END_SRC

** Instalação dos pacotes

Existem diversas formas de instalar os pacotes. Será utilizado o [[https://github.com/jwiegley/use-package][use-package]] para deixar as coisas mais ordenadas e facilitar a inclusão/exclusão (a exclusão pode ser temporária)

#+BEGIN_SRC emacs-lisp +n
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
#+END_SRC

#+begin_tip
Algumas opções do use-package:
- *:ensure t* → indica que o pacote deverá ser baixado se não existir localmente
- *:init* → configurações antes do pacote ser carregado
- *:config* → configuração após o pacote ser carregado
- *:bind* → criar um atalho para uma função
- *:disabled* → desabilita o pacote sem a necessidade de excluí-lo do arquivo de configuração
#+end_tip

#+BEGIN_SRC emacs-lisp +n
  (use-package org-ioslide
    :disabled
    :ensure t)
#+END_SRC

** Configurações para auxiliar a digitação

*** [[https://github.com/abo-abo/swiper][swiper]]

#+BEGIN_SRC emacs-lisp +n
  (use-package swiper
    :ensure t)
    ;;:bind ("C-s C-f" . swiper))
#+END_SRC

*** [[https://github.com/justbur/emacs-which-key][which-key]]

Mostra os atalhos disponíveis quando o usuário digita =Ctrl-x=, =Ctrl-c=, =Ctrl-h=, etc. e não digita imediatamente a sequência.

#+BEGIN_SRC emacs-lisp +n
  (use-package which-key
    :ensure t
    :config
    (which-key-mode)
    (setq which-key-idlw-delay 0.5))
#+END_SRC

***  [[https://github.com/nonsequitur/smex][smex]]

Facilita a execução de comandos quando o usuário digita =Alt-x= (comandos gerais) ou =Alt-X= (comandos do modo atual do buffer).

#+BEGIN_SRC emacs-lisp +n
  (use-package smex
    :ensure t
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands)))
#+END_SRC

*** [[https://github.com/victorhge/iedit][iedit]]

Parecido com [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]], permite a edição simultânea de multiplas regiões. Pessoalmente, acho interessante o fato de =C-'= esconder o resto do texto para uma vizualização geral das ocorrências, editar apenas as ocorrências de uma função ou linha.

#+BEGIN_SRC emacs-lisp +n
  (use-package iedit
    :ensure t
    :bind (("C-;" . iedit-mode)
           ("C-RET" . iedit-rectangle-mode)))
#+END_SRC

#+begin_tip 
- =C-;= com o cursor em uma palavra para selecionar todas do texto. Pressione novamente para sair
- =C-'= esconde o texto deixando apenas uma linha antes e depois para visualização mais global
- =M-{= expande uma linha para cima
- =M-}= expande uma linha para baixo
- =M-;= altera a seleção
- =M-I= apenas a linha corrente
- =M-SPC= troca as seleções por espaços
- =M-<= primeira ocorrência
- =M->= última ocorrência
- =M-D= exclui todas ocorrências
- =M-L= converte para minúsculas
- =M-U= converte para maiúsculas
- =M-R= troca ocorrências por ...
- =M-N= númera de ocorrências
- etc..
#+end_tip

*** [[https://github.com/magnars/multiple-cursors.el][multiple-cursors]]

Trabalha com multiplos cursores. Parecido com iedit anterior mas tem algumas vantagens como os cursores mais flexíveis. Na página tem mais informações. Este [[http://emacsrocks.com/e13.html][vídeo]] tem um exemplo muito interessante para a utilização. Existem diversos vídeos no site cobrindo outros assuntos.

#+BEGIN_SRC emacs-lisp +n
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)))
#+END_SRC

***  [[https://github.com/DarwinAwardWinner/ido-yes-or-no][ido-yes-or-no]]

Facilita respostas com yes/no permitindo apenas o pressionamento de y/n e enter.

#+BEGIN_SRC emacs-lisp +n
  (use-package ido-yes-or-no
    :ensure t
    :config
    (ido-yes-or-no-mode t))
#+END_SRC

*** [[https://github.com/auto-complete/auto-complete][auto-complete]]

Mostra um menu para auxiliar a completar o que está sendo digitado.

#+BEGIN_SRC emacs-lisp +n
  (use-package auto-complete
    :ensure t
    :config
    (ac-config-default))
#+END_SRC

** Configurações visuais

*** [[https://github.com/NicolasPetton/zerodark-theme][zerodark-theme]]

Achei o thema interessante. Você pode ir em [[https://emacsthemes.com/][Emacs Themes]] e ver outros que você pode gostar mais.

#+BEGIN_SRC emacs-lisp +n
  (use-package zerodark-theme
    :ensure t
    :config
    (load-theme 'zerodark t))
#+END_SRC

*** [[https://github.com/larkery/ido-grid-mode.el][ido-grid-mode]]

Apenas para combinar mais com a apresentação do which-key. Mostra as opções em grade em vez de linha.

#+BEGIN_SRC emacs-lisp +n
  (use-package ido-grid-mode
    :ensure t
    :config
    (setq ido-enable-flex-matching t)
    (setq ido-everywhere t)
    (ido-mode t)
    (ido-grid-mode t))
#+END_SRC

*** [[https://github.com/pjones/ido-select-window][ido-select-window]]

Facilita a seleção da janela quando existem diversos buffers visualizados simultaneamente.

#+BEGIN_SRC emacs-lisp +n
  (use-package ido-select-window
    :ensure t
    :bind ("C-x o" . ido-select-window))
#+END_SRC

*** [[https://github.com/tom-tan/hlinum-mode][hlinum-mode]]

Extende a seleção da linha atual para o número da linha. Veja outras configurações para [[https://www.emacswiki.org/emacs/LineNumbers][linum]]

#+BEGIN_SRC emacs-lisp +n
  (use-package hlinum
    :ensure t
    :config
    (hlinum-activate))
#+END_SRC

*** [[https://github.com/mattfidler/linum-off][linum-off]]

Desabilita número de linhas em determnados modos.

#+BEGIN_SRC emacs-lisp +n
  (use-package linum-off
    :ensure t)
#+END_SRC

*** [[https://github.com/zk-phi/indent-guide][indent-guide]]

Mostra uma linha para indentação do código para facilitar a visualização. Outra opção é o [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight-indentention-for-Emacs]]

#+BEGIN_SRC emacs-lisp +n
  (use-package indent-guide
    :ensure t
    :config
    (indent-guide-global-mode))
#+END_SRC
*** [[https://github.com/Fanael/rainbow-delimiters][rainbow-delimiters]] <<rainbow-delimiters>>

Optei por utilizar apenas duas cores utilizando as cores do tema para *keyword* e *string*. 

#+BEGIN_SRC emacs-lisp +n -r 
  (use-package rainbow-delimiters
    :ensure t
    :config
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    (require 'color)
    (defvar my-paren-dual-colors    (ref:sc-rd1)
      '((face-attribute 'font-lock-string-face :foreground)
        (face-attribute 'font-lock-keyword-face :foreground)))
    (setq rainbow-delimiters-outermost-only-face-count 0)
    (setq rainbow-delimiters-max-face-count 2)
    (set-face-foreground 'rainbow-delimiters-depth-1-face
                         (eval (elt my-paren-dual-colors 1)))
    (set-face-foreground 'rainbow-delimiters-depth-2-face
                         (eval (elt my-paren-dual-colors 0))) (ref:sc-rd2)
                         )
#+END_SRC

#+begin_tip
Você pode deixar cada fechamento de delimitar de uma cor. Substitua da linha [[(sc-rd1)]] até a linha [[(sc-rd2)]] pelo código abaixo:
#+BEGIN_SRC emacs-lisp :tangle no
  (cl-loop
   for index from 1 to rainbow-delimiters-max-face-count
   do
   (let ((face (intern (format "rainbow-delimiters-depth-%d-face" index))))
     (cl-callf color-saturate-name (face-foreground face) 30)))
#+END_SRC
#+end_tip

** Utilitários

*** [[https://github.com/iqbalansari/restart-emacs][restart-emacs]]

Permite reicializar o Emacs de dentro do Emacs.

#+BEGIN_SRC emacs-lisp +n
  (use-package restart-emacs
    :ensure t
    :config
    (setq restart-emacs-restore-frames t))
#+END_SRC

#+begin_tip 
Prefixos
=C-u= reinicia com --debug-init
=C-u C-u= reinicia com -Q
#+end_tip

*** [[https://github.com/hniksic/emacs-htmlize][htmlize]]

Permite exportar o conteúdo de um buffer para uma página .html com o mesmo tema utilizado pelo emacs bem como salientar a sintaxe dos fontes no org-mode. 

#+BEGIN_SRC emacs-lisp +n
  (use-package htmlize
    :ensure t
    :defer t)
#+END_SRC

*** [[https://github.com/jaypei/emacs-neotree][neotree]]

Permite a utilização do neotree para navegar no sistema de arquivos em vez do dired. Assinala =Ctrl-\= para mostrar/esconder neotree.

#+BEGIN_SRC emacs-lisp +n
  (use-package neotree
    :ensure t
    :bind ("C-\\" . neotree-toggle))
#+END_SRC

*** [[https://github.com/Malabarba/paradox][paradox]]

Um gerenciador de pacotes melhorado.

#+BEGIN_SRC emacs-lisp +n
  (use-package paradox
    :ensure t
    :config
    (paradox-enable))
#+END_SRC

*** [[https://github.com/magit/magit][magit]]

Interface com o Git

#+BEGIN_SRC emacs-lisp +n
  (use-package magit
    :ensure t
    :bind ("C-x g" . magit-status))
#+END_SRC

*** [[https://github.com/tumashu/el2org][el2org]] e [[https://github.com/larstvei/ox-gfm][ox-gfm]]

O =el2org= é necessário para o =org-webpage= e o =ox-gfm= é necessário para =el2org=.

#+BEGIN_SRC emacs-lisp +n
  (use-package ox-gfm
    :ensure t)
  (use-package el2org
    :ensure t)
#+END_SRC

*** [[https://github.com/tumashu/org2web][org-webpage]] <<org-webpage>>

Para gerenciamento do blog estático no github.

#+BEGIN_SRC emacs-lisp +n
  (use-package org-webpage
    :ensure t
    :defer t)
  (org2web-add-project
   '("cadafalso"
     :repository-directory "~/projetos/org2blog"
     :remote (git "https://github.com/guaracy/guaracy.github.com.git" "master")
     :site-domain "http://guaracy.github.io/"
     :site-main-title "Cadafalso"
     :site-sub-title "Apenas mais um blog"
     :default-category "blog"
     :theme (org)
     :source-browse-url ("Github" "https://github.com/guaracy/guaracy.github.com")
     :web-server-port 7654))
#+END_SRC

** Linguagens

Pacotes para auxiliar a entrada de programas/arquivos em determinada linguagem

*** [[https://github.com/guaracy/red.el][red.el]] <<Red>>

Salientar sintaxe para arquivos Red e Red/System. Utilizo a cópia local do [[https://github.com/guaracy/red.el][GitHub]]. Como [[http://www.red-lang.org/][Red]] ainda está em desenvolvimento, ainda faltam diversas coisas. Mas o básico como salientar a sintaxe e executar/exportar códigos em documentos .org estão funcionando.

#+BEGIN_SRC emacs-lisp +n
  (use-package red
    :load-path "~/github/guaracy/red.el"
    :config
    (autoload 'red-mode "red.el" "Major mode for Red development" t)
    (add-to-list 'auto-mode-alist '("\\.red$" . red-mode))
    )
#+END_SRC

*** [[https://github.com/purcell/less-css-mode][less-css-mode]]

Para edição de arquivo .less para gerar .css (como não gosto e não precisei de s[a|c]ass). Para compilar e gerar o .css basta pressionar =C-c C-c=.

#+BEGIN_SRC emacs-lisp +n
  (use-package less-css-mode
    :ensure t)
#+END_SRC

** Configurações adicionais

Algumas configurações deixadas para o final

#+BEGIN_SRC emacs-lisp +n
  (setq org-confirm-babel-evaluate nil)
  (setq org-support-shift-select t)
  (setq org-support-shift-select 'always)
  (setq org-html-htmlize-output-type 'css)
  (setq org-src-fontify-natively t)
  (setq org-export-default-language "pt_BR")
  (add-hook 'org-mode-hook #'visual-line-mode)
  (add-hook 'org-mode-hook #'toggle-word-wrap)
  (add-to-list 'org-structure-template-alist '("t" "#+begin_tip ?\n\n#+end_tip"))
  (add-to-list 'org-structure-template-alist '("n" "#+begin_note ?\n\n#+end_note"))
  ;; linguagens utilizadas por org-babel
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (red . t)
     (python . t)
     (ruby . t)
     (R . t)
     (C . t)
     (ditaa . t)
     (shell . t)))
#+END_SRC

#+BEGIN_SRC emacs-lisp +n
  (defvar my-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Definição de funções

Agora a definição de algumas funções que achei úteis (YMMV)

*** Abrir lista de arquivos recente (C-x C-r))

#+BEGIN_SRC emacs-lisp +n
  (require 'recentf)
  (recentf-mode t)
  (setq recentf-max-menu-items 25)
  (defun recentf-ido-find-file ()
    "Find a recent file using Ido."
    (interactive)
    (let ((file (ido-completing-read "Choose recent file: " recentf-list nil t)))
      (when file
        (find-file file))))
  (global-set-key (kbd "C-x C-r") 'recentf-ido-find-file)
#+END_SRC

#+BEGIN_SRC emacs-lisp +n -r
  ;; ------  fim do arquivo de configuração (ref:sc-fim)
#+END_SRC

Pronto. E essas são as [[(sc-fim)]] linhas de configuração.

* Adaptações <<adaptacao>>

Como disse antes, serão necessárias algumas alterações. Se você não deseja algum pacote, você pode apenas excluir toda a parte existente no arquivo .org. Se você não quer no momento ou não sabe se será preciso, inclua =:disabled= antes de =:ensure t= como no [[dummy-pkg][exemplo]].

Leia a [[file:REDAME.html][documentação]] para ver o resumo de cada pacote e/ou seguir o link do pacote para maiores informações. 

** Requisitos
- Ter o Emacs (versão 24.4 ou maior) instalado (instale pelo gerenciador de pacotes da sua distribuição).
- Não possuir o arquivo "~/.emacs" (se existir, faça backup e apague o existente pois será *destruído*).

** Iniciando
- Digite =git clone https://github.com/guaracy/.emacs.d ~/.emacs.d= e pressione enter para baixar este repositório.
- Digite no prompt =emacs ~/.emacs.d/README.org= para editar o arquivo README.org e siga os passos abaixo.

** Alterando
- Faça as alterações desejadas, incluindo, eliminando ou desabilitando os pacotes desejados.
- Ajuste os parâmetros dos pacotes para as suas necessidades/configurações.

** Gerando
- Salve o arquivo alterado digitando =C-x C-s=
- Gere a documentação digitando =C-c e h h=
- Gere o arquivo ~/.emacs digitando =C-c C-v t=
- Encerre o Emacs digitando =C-x C-c=

Agora é só iniciar o Emacs que os pacotes necessários serão baixados e as novas configurações serão aplicadas.

* Problemas

Você pode tirar dúvidas consultando o Google o DuckDuckGo, por exemplo, no [[https://stackoverflow.com/questions/tagged/emacs][stackoverflow]] e [[https://www.reddit.com/r/emacs/][reddit]] entre outros.

Como qualquer programa, o Emacs pode apresentar problemas.

#+BEGIN_tip 
Se for exportar para html =C-e= =h= e aparece a mensagem /Wrong type argument: listp, .../ pode ser suficiente digitar:

=C-u= =M-x= org-reload  ou =C-c C-x !=
#+end_tip

#+BEGIN_tip 
Se aparecer o erro: /Invalid function: org-babel-header-args-safe-fn/
rodar o código abaixo
#+BEGIN_SRC emacs-lisp
  (byte-recompile-file
       (expand-file-name "ob-R.el"
                        (file-name-directory (locate-library "org")))
       t)
#+END_SRC
#+end_tip

#+begin_tip 
Você já sabe mas, para interromper um comando digite =C-g=
#+end_tip


*Fim*
